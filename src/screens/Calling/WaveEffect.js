import React from 'react';
// import { useEffect, useRef } from 'react';
import { View, StyleSheet, Dimensions } from 'react-native';

import Animated, {
  useCode,
  block,
  set,
  Easing,
  Clock,
  // startClock,
  // cond,
  // and,
  // not,
  // clockRunning,
  // stopClock,
} from 'react-native-reanimated';
import { interpolatePath, loop } from 'react-native-redash';

import Svg, {
  Path,
  Rect,
  G,
  Defs,
  LinearGradient,
  Stop,
} from 'react-native-svg';
import { useMemoOne } from 'use-memo-one';

const wavePathes = [
  'M0,160L48,133.3C96,107,192,53,288,74.7C384,96,480,192,576,229.3C672,267,768,245,864,218.7C960,192,1056,160,1152,138.7C1248,117,1344,107,1392,101.3L1440,96L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z',
  'M0,192L48,181.3C96,171,192,149,288,128C384,107,480,85,576,96C672,107,768,149,864,186.7C960,224,1056,256,1152,266.7C1248,277,1344,267,1392,261.3L1440,256L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z',
  'M0,160L48,138.7C96,117,192,75,288,101.3C384,128,480,224,576,240C672,256,768,192,864,165.3C960,139,1056,149,1152,176C1248,203,1344,245,1392,266.7L1440,288L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z',
  'M0,160L40,181.3C80,203,160,245,240,256C320,267,400,245,480,224C560,203,640,181,720,144C800,107,880,53,960,48C1040,43,1120,85,1200,85.3C1280,85,1360,43,1400,21.3L1440,0L1440,320L1400,320C1360,320,1280,320,1200,320C1120,320,1040,320,960,320C880,320,800,320,720,320C640,320,560,320,480,320C400,320,320,320,240,320C160,320,80,320,40,320L0,320Z',
  'M0,64L40,74.7C80,85,160,107,240,122.7C320,139,400,149,480,149.3C560,149,640,139,720,160C800,181,880,235,960,218.7C1040,203,1120,117,1200,80C1280,43,1360,53,1400,58.7L1440,64L1440,320L1400,320C1360,320,1280,320,1200,320C1120,320,1040,320,960,320C880,320,800,320,720,320C640,320,560,320,480,320C400,320,320,320,240,320C160,320,80,320,40,320L0,320Z',
  'M0,64L40,90.7C80,117,160,171,240,181.3C320,192,400,160,480,138.7C560,117,640,107,720,128C800,149,880,203,960,218.7C1040,235,1120,213,1200,202.7C1280,192,1360,192,1400,192L1440,192L1440,320L1400,320C1360,320,1280,320,1200,320C1120,320,1040,320,960,320C880,320,800,320,720,320C640,320,560,320,480,320C400,320,320,320,240,320C160,320,80,320,40,320L0,320Z',
  'M0,128L40,144C80,160,160,192,240,213.3C320,235,400,245,480,224C560,203,640,149,720,154.7C800,160,880,224,960,240C1040,256,1120,224,1200,192C1280,160,1360,128,1400,112L1440,96L1440,320L1400,320C1360,320,1280,320,1200,320C1120,320,1040,320,960,320C880,320,800,320,720,320C640,320,560,320,480,320C400,320,320,320,240,320C160,320,80,320,40,320L0,320Z',
  'M0,256L40,261.3C80,267,160,277,240,250.7C320,224,400,160,480,154.7C560,149,640,203,720,229.3C800,256,880,256,960,218.7C1040,181,1120,107,1200,90.7C1280,75,1360,117,1400,138.7L1440,160L1440,320L1400,320C1360,320,1280,320,1200,320C1120,320,1040,320,960,320C880,320,800,320,720,320C640,320,560,320,480,320C400,320,320,320,240,320C160,320,80,320,40,320L0,320Z',
  'M0,128L40,144C80,160,160,192,240,170.7C320,149,400,75,480,80C560,85,640,171,720,186.7C800,203,880,149,960,128C1040,107,1120,117,1200,154.7C1280,192,1360,256,1400,288L1440,320L1440,320L1400,320C1360,320,1280,320,1200,320C1120,320,1040,320,960,320C880,320,800,320,720,320C640,320,560,320,480,320C400,320,320,320,240,320C160,320,80,320,40,320L0,320Z',
  'M0,224L40,192C80,160,160,96,240,90.7C320,85,400,139,480,176C560,213,640,235,720,250.7C800,267,880,277,960,266.7C1040,256,1120,224,1200,202.7C1280,181,1360,171,1400,165.3L1440,160L1440,320L1400,320C1360,320,1280,320,1200,320C1120,320,1040,320,960,320C880,320,800,320,720,320C640,320,560,320,480,320C400,320,320,320,240,320C160,320,80,320,40,320L0,320Z',
  'M0,160L40,138.7C80,117,160,75,240,69.3C320,64,400,96,480,96C560,96,640,64,720,96C800,128,880,224,960,240C1040,256,1120,192,1200,160C1280,128,1360,128,1400,128L1440,128L1440,320L1400,320C1360,320,1280,320,1200,320C1120,320,1040,320,960,320C880,320,800,320,720,320C640,320,560,320,480,320C400,320,320,320,240,320C160,320,80,320,40,320L0,320Z',
  'M0,64L40,64C80,64,160,64,240,69.3C320,75,400,85,480,117.3C560,149,640,203,720,208C800,213,880,171,960,176C1040,181,1120,235,1200,256C1280,277,1360,267,1400,261.3L1440,256L1440,320L1400,320C1360,320,1280,320,1200,320C1120,320,1040,320,960,320C880,320,800,320,720,320C640,320,560,320,480,320C400,320,320,320,240,320C160,320,80,320,40,320L0,320Z',
  'M0,128L40,149.3C80,171,160,213,240,208C320,203,400,149,480,160C560,171,640,245,720,250.7C800,256,880,192,960,176C1040,160,1120,192,1200,208C1280,224,1360,224,1400,224L1440,224L1440,320L1400,320C1360,320,1280,320,1200,320C1120,320,1040,320,960,320C880,320,800,320,720,320C640,320,560,320,480,320C400,320,320,320,240,320C160,320,80,320,40,320L0,320Z',
  'M0,160L40,170.7C80,181,160,203,240,224C320,245,400,267,480,272C560,277,640,267,720,245.3C800,224,880,192,960,165.3C1040,139,1120,117,1200,122.7C1280,128,1360,160,1400,176L1440,192L1440,320L1400,320C1360,320,1280,320,1200,320C1120,320,1040,320,960,320C880,320,800,320,720,320C640,320,560,320,480,320C400,320,320,320,240,320C160,320,80,320,40,320L0,320Z',
];

const getWaves = () => {
  const arr = [].concat(wavePathes);
  for (let i = arr.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
};

const AnimatedPath = Animated.createAnimatedComponent(Path);

const { width } = Dimensions.get('window');

const scale = width / 1440; // Path viewBox is 1440 x 320
const SvgWrapper = ({ gradienColors, rotate, d }) => (
  <Svg
    // viewBox={'0 0 100% 100%'}
    style={[
      styles.svgWrap,
      { transform: [{ rotate: rotate ? '180deg' : '0deg' }] },
    ]}>
    <Defs>
      <LinearGradient
        id="grad"
        x1="0"
        x2="0"
        y1={`${30 / scale}%`}
        y2={`${100 / scale}%`}
        gradientUnits="userSpaceOnUse">
        <Stop offset="0" stopColor={gradienColors[1]} stopOpacity="1" />
        <Stop offset="0.7" stopColor={gradienColors[0]} stopOpacity="1" />
      </LinearGradient>
    </Defs>

    <G fill="url(#grad)" transform={`scale(${scale}, ${scale})`}>
      <Rect
        x="0"
        y={`${rotate ? 30 / scale : 21 / scale}%`}
        width={`${100 / scale}%`}
        height={`${78.7 / scale}%`}
      />

      <AnimatedPath d={d} y={rotate ? 0 : 10} />
      {/* <Path d={WaveEffect[0]} /> */}
    </G>
  </Svg>
);

const WaveEffect = ({ altColor, isPlaying }) => {
  const { progress, clock } = useMemoOne(
    () => ({
      progress: new Animated.Value(0),
      clock: new Clock(),
    }),
    [],
  );

  const loopConfig = {
    clock,
    duration: wavePathes.length * 1000,
    easing: Easing.linear,
    // easing: Easing.bezier(0.68, -0.6, 0.32, 1.6),
    boomerang: true,
  };

  useCode(
    () =>
      block([
        // cond(and(not(clockRunning(clock)), isPlaying), startClock(clock)),
        // cond(and(clockRunning(clock), not(isPlaying)), stopClock(clock)),
        // set(progress, loop(loopConfig)),
      ]),
    [isPlaying],
  );

  const backgroundColor = altColor ? '#7384BF' : '#7092EA';

  const gradienColors = altColor
    ? ['#7384BF', '#93A2D0']
    : ['#3A71FF', 'rgba(190, 201, 231, 0.78)'];

  // const inputRange = wavePathes.map((_, i) => i / (wavePathes.length - 1));

  // const d = interpolatePath(progress, {
  //   inputRange,
  //   outputRange: getWaves(),
  // });
  // const d1 = interpolatePath(progress, {
  //   inputRange,
  //   outputRange: getWaves(),
  // });

  return (
    <View style={[styles.container, { backgroundColor }]}>
      <View style={styles.upperWave}>
        <SvgWrapper rotate d={getWaves()[0]} gradienColors={gradienColors} />
      </View>
      <View style={styles.bottomWave}>
        <SvgWrapper d={getWaves()[1]} gradienColors={gradienColors} />
      </View>
    </View>
  );
};

export default WaveEffect;

const styles = StyleSheet.create({
  container: {
    ...StyleSheet.absoluteFillObject,
    justifyContent: 'space-between',
  },
  upperWave: {
    width,
    height: '33%',
  },
  bottomWave: {
    height: '50%',
    width,
  },
  linearGradient: {
    ...StyleSheet.absoluteFillObject,
  },

  svgWrap: {
    width: '100%',
    height: '100%',
  },
});
